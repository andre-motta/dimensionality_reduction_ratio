name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write  # Allow writing to repository for coverage badge updates (main branch only)
  actions: read
  checks: read
  pull-requests: read  # Allow reading PR information

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    
    # Set permissions for this job specifically
    permissions:
      contents: read  # Read-only for most operations
      actions: read
      checks: write   # Allow writing check results for PR status
      pull-requests: write  # Allow commenting on PRs if needed

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Upgrade setuptools to fix security vulnerabilities
        pip install "setuptools>=78.1.1"
        pip install -r requirements.txt
        pip install flake8 black isort pytest pytest-cov pytest-mock
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff src/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/
    
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=62 -v
    
    - name: Extract coverage percentage
      id: coverage
      run: |
        # Extract coverage percentage from coverage.xml
        coverage_percent=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); line_rate = float(root.attrib['line-rate']); coverage = int(line_rate * 100); print(coverage)")
        echo "percentage=$coverage_percent" >> $GITHUB_OUTPUT
        echo "Coverage: $coverage_percent%"
        
        # Determine badge color based on coverage
        if [ $coverage_percent -ge 70 ]; then
          echo "color=brightgreen" >> $GITHUB_OUTPUT
        elif [ $coverage_percent -ge 50 ]; then
          echo "color=yellow" >> $GITHUB_OUTPUT
        else
          echo "color=red" >> $GITHUB_OUTPUT
        fi
    
    - name: Update coverage badge in README
      if: github.ref == 'refs/heads/main' && matrix.python-version == '3.11' && github.event_name == 'push'
      run: |
        echo "Coverage badge update moved to separate job for main branch only"
    
    - name: Upload coverage reports as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
        retention-days: 30
    
    - name: Install package for CLI testing
      run: |
        pip install -e .
    
    - name: Test module import
      run: |
        python -c "from drr import main; print('Module import successful')"
        python -c "from drr.main import cli; print('CLI import successful')"
    
    - name: Test CLI functionality
      run: |
        # Test CLI commands using the installed package
        drr --help
        drr batch --help
        drr single --help
    
    - name: Test with sample data (if available)
      run: |
        # Create a minimal test dataset
        mkdir -p test_data
        echo "a,b,c" > test_data/sample.csv
        echo "1,2,3" >> test_data/sample.csv
        echo "4,5,6" >> test_data/sample.csv
        echo "7,8,9" >> test_data/sample.csv
        # Test single dataset processing
        drr single test_data/sample.csv || echo "Test completed (expected to handle small dataset)"
      continue-on-error: true

  # Separate job for updating coverage badge (main branch only)
  update-coverage-badge:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write  # Need write access to update README
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests for coverage extraction
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=62 -v
    
    - name: Extract coverage percentage
      id: coverage
      run: |
        # Extract coverage percentage from coverage.xml
        coverage_percent=$(python -c "import xml.etree.ElementTree as ET; tree = ET.parse('coverage.xml'); root = tree.getroot(); line_rate = float(root.attrib['line-rate']); coverage = int(line_rate * 100); print(coverage)")
        echo "percentage=$coverage_percent" >> $GITHUB_OUTPUT
        echo "Coverage: $coverage_percent%"
        
        # Determine badge color based on coverage
        if [ $coverage_percent -ge 70 ]; then
          echo "color=brightgreen" >> $GITHUB_OUTPUT
        elif [ $coverage_percent -ge 50 ]; then
          echo "color=yellow" >> $GITHUB_OUTPUT
        else
          echo "color=red" >> $GITHUB_OUTPUT
        fi
    
    - name: Update coverage badge in README
      run: |
        coverage=${{ steps.coverage.outputs.percentage }}
        color=${{ steps.coverage.outputs.color }}
        
        # Update the coverage badge in README.md
        sed -i "s/\[\!\[Coverage: [0-9]*%\]\(https:\/\/img\.shields\.io\/badge\/coverage-[0-9]*%25-[a-z]*\.svg\)\]/[![Coverage: ${coverage}%](https:\/\/img.shields.io\/badge\/coverage-${coverage}%25-${color}.svg)]/g" README.md
        
        # Check if README was modified
        if git diff --quiet README.md; then
          echo "No changes to README.md"
        else
          echo "Coverage badge updated to ${coverage}% (${color})"
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Commit and push the change
          git add README.md
          git commit -m "Update coverage badge to ${coverage}%"
          git push

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Upgrade setuptools to fix security vulnerabilities
        pip install "setuptools>=78.1.1"
        pip install -r requirements.txt
        pip install bandit>=1.7.5 "safety>=3.0.0" "typer>=0.12.0,<0.13.0" pytest pytest-cov
    
    - name: Security audit with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/
    
    - name: Check for known security vulnerabilities
      run: |
        safety check
