name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Upgrade setuptools to fix security vulnerabilities
        pip install "setuptools>=78.1.1"
        pip install -r requirements.txt
        pip install flake8 black isort pytest pytest-cov pytest-mock
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff src/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff src/
    
    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=62 -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage reports as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
    
    - name: Test CLI functionality
      run: |
        cd src
        python main.py --help
        python main.py batch --help
        python main.py single --help
    
    - name: Test with sample data (if available)
      run: |
        cd src
        # Create a minimal test dataset
        mkdir -p ../test_data
        echo "a,b,c" > ../test_data/sample.csv
        echo "1,2,3" >> ../test_data/sample.csv
        echo "4,5,6" >> ../test_data/sample.csv
        echo "7,8,9" >> ../test_data/sample.csv
        # Test single dataset processing
        python main.py single ../test_data/sample.csv || echo "Test completed (expected to handle small dataset)"
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Upgrade setuptools to fix security vulnerabilities
        pip install "setuptools>=78.1.1"
        pip install -r requirements.txt
        pip install bandit>=1.7.5 "safety>=3.0.0" "typer>=0.12.0,<0.13.0" pytest pytest-cov
    
    - name: Security audit with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/
    
    - name: Check for known security vulnerabilities
      run: |
        safety check
